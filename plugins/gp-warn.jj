/*
const MAX_WARNINGS = 3;


function getItalianTimestamp() {
    return new Date().toLocaleString('it-IT', {
        timeZone: 'Europe/Rome',
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

let handler = async (m, { conn, text, participants, usedPrefix, command }) => {
    const OWNER_NUMBER = '393534409026@s.whatsapp.net';
    const isOwner = m.sender === OWNER_NUMBER;
    const isAdmin = participants.find(p => p.id === m.sender)?.admin === 'admin' || isOwner;
    
    if (!isAdmin) return m.reply('‚ö†Ô∏è Solo gli admin possono usare questo comando');

    let who = m.mentionedJid[0] || (m.quoted ? m.quoted.sender : null);
    if (!who) return m.reply(`‚ö†Ô∏è Devi menzionare o citare un utente\nEsempio: ${usedPrefix + command} @utente [motivo]`);

    if (who.includes(conn.user.jid.split('@')[0])) return conn.reply(m.chat,'‚ùå Non posso warnare me stessa',m,phishy);

    const targetIsAdmin = participants.find(p => p.id === who)?.admin === 'admin';
    if (targetIsAdmin && !isOwner) return m.reply('‚ùå Non puoi warnare un altro admin!');

    const comment = text ? text.replace(/@\d+/, '').trim() : null;
    
    if (!global.db.data.users[who]) {
        global.db.data.users[who] = { warn: 0, warnReasons: [] };
    }
    const user = global.db.data.users[who];
    
    if (!user.warnReasons || !Array.isArray(user.warnReasons)) {
        user.warnReasons = [];
    }

    const timestamp = new Date().toISOString();
    const displayTime = getItalianTimestamp();
    
    user.warnReasons.push({
        reason: comment || "Nessun motivo specificato",
        date: timestamp,
        displayDate: displayTime,
        admin: m.sender
    });

    user.warn = (user.warn || 0) + 1;

    const fkontak = {
        key: { 
            participant: '0@s.whatsapp.net',
            remoteJid: 'status@broadcast'
        },
        message: { 
            contactMessage: {
                vcard: `BEGIN:VCARD\nVERSION:3.0\nN:${who.split('@')[0]};;;\nFN:${who.split('@')[0]}\nitem1.TEL;waid=${who.split('@')[0]}:${who.split('@')[0]}\nitem1.X-ABLabel:Cellulare\nEND:VCARD`
            }
        }
    };

    const warnMsg = `‚ö†Ô∏è *AVVISO ${isOwner ? 'OWNER' : 'ADMIN'}* ‚ö†Ô∏è\n\n` +
                  `‚ñ∏ Utente: @${who.split('@')[0]}\n` +
                  `‚ñ∏ Warn: ${user.warn}/${MAX_WARNINGS}\n` +
                  `‚ñ∏ Motivo: ${comment || "Nessun motivo specificato"}\n` +
                  `‚ñ∏ Data: ${displayTime}\n\n` +
                  `‚ö†Ô∏è Al raggiungimento di ${MAX_WARNINGS} warn verrai rimosso!`;

    if (user.warn < MAX_WARNINGS) {
        await conn.sendMessage(m.chat, { 
            text: warnMsg,
            mentions: [who]
        }, { quoted: fkontak });
    } else {
        user.warn = 0;
        user.warnReasons = [];
        await conn.sendMessage(m.chat, {
            text: `üíÄ *UTENTE RIMOSSO* üíÄ\n\n@${who.split('@')[0]} ha superato il limite!`,
            mentions: [who]
        }, { quoted: fkontak });
        await new Promise(resolve => setTimeout(resolve, 1000));
        await conn.groupParticipantsUpdate(m.chat, [who], 'remove');
    }
};

handler.help = ['warn @user [motivo]'];
handler.tags = ['group'];
handler.command = /^(warn|warning|avverti)$/i;
handler.group = true;
handler.admin = true;
handler.botAdmin = true;

export default handler;